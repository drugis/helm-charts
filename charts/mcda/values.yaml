replicaCount: 1

image:
  repository: addis/mcda
  pullPolicy: IfNotPresent
  tag: "test"

patavi:
  apiKey: xxxxx
  host: patavi.patavi-patavi-server.svc
  port: 3000

postgresql:
  postgresqlUsername: mcda
  postgresqlDatabase: mcda
  postgresqlPassword: xxxxx
  initdbUser: mcda
  initdbPassword: xxxxxx
  master:
    extraInitContainers:
      - name: get-database-schema
        image: k8s.gcr.io/git-sync/git-sync:v3.3.5
        volumeMounts:
        - name: initdb
          mountPath: /docker-entrypoint-initdb.d
        env:
        - name: GIT_SYNC_REPO
          value: https://github.com/drugis/mcda-elicitation-web
        - name: GIT_SYNC_BRANCH
          value: master
        - name: GIT_SYNC_DEPTH
          value: "1"
        - name: GIT_SYNC_ONE_TIME
          value: "true"
        - name: GIT_SYNC_ROOT
          value: /docker-entrypoint-initdb.d
      - name: cleanup-repo
        image: busybox:1.28
        command: ['sh', '-c', "cd /docker-entrypoint-initdb.d && find . ! -name 'database.pg.sql' -type f -exec rm -f {} +"]
        volumeMounts:
        - name: initdb
          mountPath: /docker-entrypoint-initdb.d
    extraVolumes:
      - name: initdb
        emptyDir: {}
    extraVolumeMounts:
      - name: initdb
        mountPath: /docker-entrypoint-initdb.d

mcda:
  googleKey: xxxx
  googleSecret: xxxx
  cookieSecret: xxxx
  host: mcda.dev.molgenis.org
  secure: "false"
  authenticationMethod: GOOGLE

imagePullSecrets: []
nameOverride: ""
fullnameOverride: ""

serviceAccount:
  create: true
  annotations: {}
  name: ""

podAnnotations: {}
podSecurityContext: {}
securityContext: {}

service:
  type: ClusterIP
  port: 3002

ingress:
  enabled: false
  className: ""
  annotations: {}
  hosts:
    - host: mcda.dev.molgenis.org
      paths:
        - path: /
          pathType: ImplementationSpecific
  tls: []

resources: {}

autoscaling:
  enabled: false
  minReplicas: 1
  maxReplicas: 100
  targetCPUUtilizationPercentage: 80

nodeSelector: {}
tolerations: []
affinity: {}


